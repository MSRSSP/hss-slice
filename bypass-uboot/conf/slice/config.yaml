#
# HSS Payload Generator - buildroot configuration file
#

# First, we can optionally set a name for our image, otherwise one will be created dynamically
set-name: 'slice-kernel'

#
# Next, we'll define the entry point addresses for each hart, as follows:
#
hart-entry-points: {u54_1: '0x80000000', u54_2: '0x80000000', u54_3: '0x1000000000', u54_4: '0x1000000000'}
hart-args: {u54_1: '0x83000000', u54_2: '0x83000000', u54_3: '0x1003000000', u54_4: '0x1003000000'}
hart-memsize: {u54_1: '0x20000000', u54_2: '0x20000000', u54_3: '0x20000000', u54_4: '0x20000000'}

#
# Finally, we'll define a payloads (source binary file) that will be placed at certain regions in memory
# The payload section is defined with the keyword payloads, and then a number of individual
# payload descriptors.
#
# Each payload has a name (path to its ELF/bin file), an owner-hart, and optionally 1-3 secondary-harts.
#
# Additionally, it has a privilege mode in which it will start execution.
#  * Valid privilege modes are PRV_M, PRV_S and PRV_U.
#
#
# In this case, the only payload is the u-boot s-mode binary.
#
# Case only matters for the ELF path names, not the keywords.
# 
payloads:
        ../../linux-polarfire/build-riscv/arch/riscv/boot/Image: {
                exec-addr: '0x80000000', 
                owner-hart: u54_1, 
                secondary-hart: u54_2,   
                priv-mode: prv_s, 
                ancilliary-data: dts/slice-1.dtb
        }
        ../../linux-polarfire/build-riscv/arch/riscv/boot/Image: {
                exec-addr: '0x1000000000', 
                owner-hart: u54_3, 
                secondary-hart: u54_4,  
                priv-mode: prv_s, 
                ancilliary-data: dts/slice-2.dtb
        }
